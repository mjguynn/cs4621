#version 430 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, r8) uniform restrict image2D u_stroke;
layout (location = 1) uniform ivec2 u_offset;
layout (location = 2) uniform vec2 u_start;
layout (location = 3) uniform vec2 u_end;
// X: radius, Y: hardness
layout (location = 4) uniform vec2 u_params;

float distance_to_rod(vec2 coords) {
	vec2 dir = u_end - u_start;
	vec2 rel = coords - u_start;
	float fac_num = dot(dir, rel);
	float fac_den = dot(dir, dir);
	float fac = clamp(fac_num / fac_den, 0.0f, 1.0f);
	vec2 offset = vec2(rel) - fac * vec2(dir);
	return length(offset);
}
float hardness_factor(float distance, float radius, float hardness) {
	float normalized = clamp( (radius - distance) / radius, 0.0f, 1.0f);
	return pow(normalized, hardness);
}
float antialias_factor(float distance, float radius) {
	return clamp(radius - distance, 0.0f, 1.0f);
}
void main() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy) + u_offset;
	vec4 texel = imageLoad(u_stroke, coords);
	float dist = distance_to_rod(coords + vec2(0.5, 0.5));
	
	float h = hardness_factor(dist, u_params.x, u_params.y);
	float a = antialias_factor(dist, u_params.x);
	texel.r = max(texel.r, h*a);
	imageStore(u_stroke, coords, texel);
}